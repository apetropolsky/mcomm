#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import os
import re
import argparse

from itertools import chain
from collections import defaultdict

TEXTCHARS = bytearray({7,8,9,10,12,13,27} | set(range(0x20, 0x100)) - {0x7f})

class BinaryError(Exception):
    pass


class MisleadingArg(Exception):
    pass


class ExistenceError(Exception):
    pass


def process(keys, include, exclude):
    return (key for key in keys if key >= include and not (key & exclude))


def check_binary(row, filename):
    if row.translate(None, TEXTCHARS):
        raise BinaryError("File %s seems like a binary, "
                            "exit." % filename)
    return True


def match_args(args, paths):
    file_list = []
    for arg in args:
        if not (arg.isdigit() and 0 < int(arg) <= len(paths)):
            file_list.append(arg)
            continue

        if os.path.isfile(arg):
            raise MisleadingArg("%s: it is a file or a sequence number?" % arg)
        else: 
            arg = paths[int(arg)-1]
            file_list.append(arg)

    return file_list


def check_existence(files):
    file_list = []
    for file in files:
        if os.path.isfile(file):
            file_list.append(file)
        else:
            raise ExistenceError("File %s seems like non-existent "
                                 "and not in sequence." % file)

    return file_list


def dict_creation(paths, regex):
    
    dict_orig = defaultdict(set)

    for filename in paths:
        basename = os.path.basename(filename)
        with open(filename, 'rb') as checkfile:
            counter = 0
            for row in checkfile.readlines():
                if counter < 150 and check_binary(row, basename):
                    counter += len(row)

                if re.search(regex, row) is not None:

                    dict_orig[row.rstrip('\n')].add(filename)
    
    dict_new = defaultdict(list)

    while dict_orig:
        k, v = dict_orig.popitem()
        dict_new[frozenset(v)].append(k)

    return dict_new
        

def main():


    parser = argparse.ArgumentParser()
    
    parser.add_argument("path", nargs='+',
                        help="paths to two or more files "
                             "for comparison")

    parser.add_argument("-e", "--exclude", nargs='+', 
                        help="show common lines in all files, "
                             "except lines from excluded files. "
                             "You can specify file by path or "
                             "by sequence number")

    parser.add_argument("-u", "--unique", nargs='*',
                        help="show unique lines for given files, "
                             "for all if empty. "
                             "You can specify file by path or "
                             "by sequence number")


    parser.add_argument("-r", "--regex", help="apply an regex for every "
                        "string of files")
    
    args = parser.parse_args()

    path_list = args.path[:]

    exclude_list = []
    if args.exclude:
        try:
            exclude_list = match_args(args.exclude, path_list)
            path_list.extend(exclude_list)
        except MisleadingArg as e:
            print e
            return 1


    unique_list = []
    if args.unique:
        try:
            unique_list = match_args(args.unique, path_list)
            path_list.extend(unique_list)
        except MisleadingArg as e:
            print e
            return 1

  
    if len(path_list) == 1:
        print "Please specify two or more files."
        return 1
    else:
        try:
            path_list = check_existence(path_list)
        except ExistenceError as e:
            print e
            return 1

    path_set = set(path_list)
    exclude_set = set(exclude_list)

    if args.regex:
        try:
            dict_full = dict_creation(path_set, args.regex)
        except BinaryError as e:
            print e
            return 1
    else:
        try:
            dict_full = dict_creation(path_set, "")
        except BinaryError as e:
            print e
            return 1

    keys = dict_full.keys()

    if args.unique is not None:
        if not unique_list:
            unique_list = (path for path in path_list 
                           if path not in exclude_set)

        for file in unique_list:
            print 'Unique lines in %s:\n---' % file
            print '\n'.join(sorted(dict_full[frozenset([file])]))
            print ''
    
        return 0

    keys = process(keys, path_set - exclude_set, exclude_set)

    print '\n'.join(sorted(chain.from_iterable(dict_full[key] \
                for key in keys)))

if __name__ == "__main__":
    main()
